---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

# python-twine-check-action
name: "üì¶ Verify Build Artefacts with Twine"
description: "Verifies Python build artefacts prior to package publishing"
# Call prior to package publishing to validate filenames/content

inputs:
  # Optional
  PATH:
    description: "Directory/folder containing Python build artefacts"
    required: false
    # type: string
    default: "dist"
  PATH_PREFIX:
    description: "Directory location containing project code"
    # type: string
    required: false

runs:
  using: "composite"
  steps:
    - name: "Setup action/environment"
      shell: bash
      run: |
        # Setup action/environment
        # Handle path_prefix input consistently and when absent
        path_prefix="${{ inputs.PATH_PREFIX }}"
        if [ -z "$path_prefix" ]; then
          # Set current directory as path prefix
          path_prefix="."
        else
          # Strip any trailing slash in provided path
          path_prefix="${path_prefix%/}"
        fi
        # Verify is a valid directory path
        if [ ! -d "$path_prefix" ]; then
          echo "Error: invalid path/prefix to project directory ‚ùå"; exit 1
        fi
        echo "path_prefix=$path_prefix" >> "$GITHUB_ENV"

    - name: "Verify Python build artefacts with Twine"
      shell: bash
      run: |
        # Verify Python build artefacts with Twine
        ARTEFACT_PATH="${{ env.path_prefix }}/${{ inputs.path }}"

        if (ls "$ARTEFACT_PATH"); then
          ARTEFACTS=$(ls $ARTEFACT_PATH | wc -l)
          if [ "$ARTEFACTS" -eq 0 ]; then
            echo "Error: specified directory/path was empty ‚ùå"
            exit 1
          else
            echo "Files in specified directory/path: $ARTEFACTS"
          fi
        else
          echo "Error: specified directory/path does not exist ‚ùå"
          exit 1
        fi

        echo "Installing: twine"
        pip install --disable-pip-version-check -q --upgrade twine
        echo "Running: twine check $ARTEFACT_PATH/*"
        if (twine check $ARTEFACT_PATH/*); then
          echo "Verified Python build artefacts with Twine ‚úÖ"
          echo "Verified Python build artefacts with Twine ‚úÖ" \
            >> "$GITHUB_STEP_SUMMARY"
        else
          echo "Python build artefacts failed Twine verification ‚ùå"
          exit 1
        fi
